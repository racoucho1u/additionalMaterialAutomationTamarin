theory PKCS11_aead begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: fst/1, getIV/1, getTag/1, kdf/2, pair/2, sdec/4, sdecSuc/4,
           senc/4, snd/1, true/0
equations:
    fst(<x.1, x.2>) = x.1,
    getIV(senc(k, iv, t, m)) = iv,
    getTag(senc(k, iv, t, m)) = t,
    sdec(k, iv, t, senc(k, iv, t, m)) = m,
    sdecSuc(k, iv, t, senc(k, iv, t, m)) = true,
    snd(<x.1, x.2>) = x.2





/* looping facts with injective instances: DCtr/2 */



restriction UniqueInteger:
  "∀ n #i #j. ((IsInteger( n ) @ #i) ∧ (IsInteger( n ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction Lesser:
  "∀ x y #i. (LessThan( x, y ) @ #i) ⇒ (∃ z. (x++z) = y)"

restriction TrueIsTrue:
  "∀ x #i. (IsTrue( x ) @ #i) ⇒ (x = true)"
  // safety formula

restriction Equality:
  "∀ x y #i. (Eq( x, y ) @ #i) ⇒ (x = y)"
  // safety formula

restriction Inequality:
  "∀ x #i. (Neq( x, x ) @ #i) ⇒ (⊥)"
  // safety formula

rule (modulo E) One[color=#aaaaee]:
   [ ] --[ IsInteger( '1' ) ]-> [ !Integer( '1' ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Suc[color=#ccccff]:
   [ !Integer( n ), In( n ) ]
  --[ IsInteger( ('1'++n) ) ]->
   [ !Integer( ('1'++n) ) ]

  // loop breaker: [0]
  /* has exactly the trivial AC variant */

rule (modulo E) Device[color=#ffccff]:
   [ Fr( ~device ), !Integer( '1' ) ]
  --[ CreateDevice( ~device ), DCtrIs( ~device, '1' ) ]->
   [ !Device( ~device ), DCtr( ~device, '1' ), Out( <~device, '1'> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Key[color=#ccff99]:
   [ !Device( device ), !Integer( lvl ), Fr( ~key ), Fr( ~handle ) ]
  --[
  CreateKey( ~key, ~handle, lvl ), InitKey( device, ~key, ~handle, lvl )
  ]->
   [ !Store( device, ~handle, ~key, lvl ), Out( <~handle, lvl> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) SharedKey[color=#ccff99]:
   [
   !Integer( lvl ), !Device( ~device ), !Device( ~ecived ), Fr( ~key ),
   Fr( ~h )
   ]
  --[
  CreateKey( ~key, ~h, lvl ), ShareKey( ~key, lvl ),
  InitKey( ~device, ~key, ~h, lvl ), InitKey( ~ecived, ~key, ~h, lvl ),
  LessThan( ('1'++'1'++'1'), lvl )
  ]->
   [
   !Store( ~device, ~h, ~key, lvl ), !Store( ~ecived, ~h, ~key, lvl ),
   Out( <~h, lvl> ), Out( <~h, lvl> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Encrypt[color=#ffcc99]:
   [
   !Integer( ('1'++ctr) ), !Device( device ), !Store( device, H, key, lvl ),
   DCtr( device, ctr ), In( msg )
   ]
  --[
  UseKey( device, key, H, lvl ), DCtrIs( device, ('1'++ctr) ),
  IV( <device, ctr> )
  ]->
   [
   DCtr( device, ('1'++ctr) ),
   Out( senc(key, <device, ctr>, <'1', 'none'>, msg) )
   ]

  // loop breaker: [3]
  /* has exactly the trivial AC variant */

rule (modulo E) Wrap[color=#ff9999]:
   [
   !Integer( ('1'++ctr) ), !Device( device ), !Store( device, h, wk, wl ),
   !Store( device, ~eh, ek, el ), DCtr( device, ctr )
   ]
  --[
  UseKey( device, wk, h, wl ), DCtrIs( device, ('1'++ctr) ),
  IV( <device, ctr> ), LessThan( el, wl )
  ]->
   [
   DCtr( device, ('1'++ctr) ), Out( senc(wk, <device, ctr>, <el, ~eh>, ek) )
   ]

  // loop breaker: [4]
  /* has exactly the trivial AC variant */

rule (modulo E) Decrypt[color=#ffcc99]:
   [ !Device( device ), !Store( device, H, key, lvl ), In( c ) ]
  --[
  UseKey( device, key, H, lvl ),
  Decrypt( sdec(key, getIV(c), getTag(c), c) ),
  IsTrue( sdecSuc(key, getIV(c), getTag(c), c) ),
  Eq( getTag(c), <'1', 'none'> )
  ]->
   [ Out( sdec(key, getIV(c), getTag(c), c) ) ]

  /*
  rule (modulo AC) Decrypt[color=#ffcc99]:
     [ !Device( device ), !Store( device, H, key, lvl ), In( c ) ]
    --[
    UseKey( device, key, H, lvl ), Decrypt( z ), IsTrue( z.1 ),
    Eq( z.2, <'1', 'none'> )
    ]->
     [ Out( z ) ]
    variants (modulo AC)
    1. c     = c.12
       key   = key.14
       z     = sdec(key.14, getIV(c.12), getTag(c.12), c.12)
       z.1   = sdecSuc(key.14, getIV(c.12), getTag(c.12), c.12)
       z.2   = getTag(c.12)
    
    2. c     = senc(key.18, x.31, z.22, z.20)
       key   = key.18
       z     = z.20
       z.1   = true
       z.2   = z.22
    
    3. c     = senc(x.32, x.33, z.24, x.35)
       key   = key.20
       z     = sdec(key.20, x.33, z.24, senc(x.32, x.33, z.24, x.35))
       z.1   = sdecSuc(key.20, x.33, z.24, senc(x.32, x.33, z.24, x.35))
       z.2   = z.24
  */

rule (modulo E) Unwrap[color=#ff9999]:
   [
   !Integer( fst(getTag(c)) ), !Device( device ),
   !Store( device, h, wk, wl ), In( c )
   ]
  --[
  UseKey( device, wk, h, wl ),
  ImportKey( device, sdec(wk, getIV(c), getTag(c), c), snd(getTag(c)),
             fst(getTag(c))
  ),
  InitKey( device, sdec(wk, getIV(c), getTag(c), c), snd(getTag(c)),
           fst(getTag(c))
  ),
  IsTrue( sdecSuc(wk, getIV(c), getTag(c), c) ), Neq( fst(getTag(c)), '1' )
  ]->
   [
   !Store( device, snd(getTag(c)), sdec(wk, getIV(c), getTag(c), c),
           fst(getTag(c))
   )
   ]

  // loop breaker: [2]
  /*
  rule (modulo AC) Unwrap[color=#ff9999]:
     [ !Integer( z ), !Device( device ), !Store( device, h, wk, wl ), In( c )
     ]
    --[
    UseKey( device, wk, h, wl ), ImportKey( device, z.2, z.1, z ),
    InitKey( device, z.2, z.1, z ), IsTrue( z.3 ), Neq( z, '1' )
    ]->
     [ !Store( device, z.1, z.2, z ) ]
    variants (modulo AC)
    1. c     = c.11
       wk    = wk.14
       z     = fst(getTag(c.11))
       z.1   = snd(getTag(c.11))
       z.2   = sdec(wk.14, getIV(c.11), getTag(c.11), c.11)
       z.3   = sdecSuc(wk.14, getIV(c.11), getTag(c.11), c.11)
    
    2. c     = senc(wk.14, x.21, x.22, z.18)
       wk    = wk.14
       z     = fst(x.22)
       z.1   = snd(x.22)
       z.2   = z.18
       z.3   = true
    
    3. c     = senc(wk.15, x.22, <z.17, z.18>, z.19)
       wk    = wk.15
       z     = z.17
       z.1   = z.18
       z.2   = z.19
       z.3   = true
    
    4. c     = senc(x.21, x.22, x.23, x.24)
       wk    = wk.15
       z     = fst(x.23)
       z.1   = snd(x.23)
       z.2   = sdec(wk.15, x.22, x.23, senc(x.21, x.22, x.23, x.24))
       z.3   = sdecSuc(wk.15, x.22, x.23, senc(x.21, x.22, x.23, x.24))
    
    5. c     = senc(x.22, x.23, <z.18, z.19>, x.26)
       wk    = wk.16
       z     = z.18
       z.1   = z.19
       z.2   = sdec(wk.16, x.23, <z.18, z.19>,
                    senc(x.22, x.23, <z.18, z.19>, x.26))
       z.3   = sdecSuc(wk.16, x.23, <z.18, z.19>,
                       senc(x.22, x.23, <z.18, z.19>, x.26))
    // loop breaker: [2]
  */

rule (modulo E) Derive[color=#ff9990]:
   [
   !Device( device ), !Store( device, h, k, ('1'++'1') ), Fr( r ), Fr( nh )
   ]
  --[
  UseKey( device, k, h, ('1'++'1') ),
  InitKey( device, kdf(k, r), nh, ('1'++'1') ),
  CreateKey( kdf(k, r), nh, ('1'++'1') )
  ]->
   [ !Store( device, nh, kdf(k, r), ('1'++'1') ), Out( nh ) ]

  // loop breaker: [1]
  /* has exactly the trivial AC variant */

lemma origin [sources]:
  all-traces
  "(∀ m #decrypt.
     (Decrypt( m ) @ #decrypt) ⇒
     (∃ #mKU. (!KU( m ) @ #mKU) ∧ (#mKU < #decrypt))) ∧
   (∀ d k l h #keyImport.
     (ImportKey( d, k, h, l ) @ #keyImport) ⇒
     ((∃ #keyCreate.
        (CreateKey( k, h, l ) @ #keyCreate) ∧ (#keyCreate < #keyImport)) ∨
      (∃ #keyKU. (!KU( k ) @ #keyKU) ∧ (#keyKU < #keyImport))))"
/*
guarded formula characterizing all counter-examples:
"((∃ m #decrypt.
    (Decrypt( m ) @ #decrypt)
   ∧
    ∀ #mKU. (!KU( m ) @ #mKU) ⇒ ¬(#mKU < #decrypt)) ∨
  (∃ d k l h #keyImport.
    (ImportKey( d, k, h, l ) @ #keyImport)
   ∧
    (∀ #keyCreate.
      (CreateKey( k, h, l ) @ #keyCreate) ⇒ ¬(#keyCreate < #keyImport)) ∧
    (∀ #keyKU. (!KU( k ) @ #keyKU) ⇒ ¬(#keyKU < #keyImport))))"
*/
by sorry

lemma Counter_Monotonicity [use_induction, reuse]:
  all-traces
  "∀ d c C #before #later.
    (((DCtrIs( d, c ) @ #before) ∧ (DCtrIs( d, C ) @ #later)) ∧
     (#before < #later)) ⇒
    (∃ z. C = (c++z))"
/*
guarded formula characterizing all counter-examples:
"∃ d c C #before #later.
  (DCtrIs( d, c ) @ #before) ∧ (DCtrIs( d, C ) @ #later)
 ∧
  (#before < #later) ∧ (∀ z. (C = (c++z)) ⇒ ⊥)"
*/
by sorry

lemma IV_Uniqueness:
  all-traces
  "∀ iv #before #later.
    ((IV( iv ) @ #before) ∧ (IV( iv ) @ #later)) ⇒ (#later = #before)"
/*
guarded formula characterizing all counter-examples:
"∃ iv #before #later.
  (IV( iv ) @ #before) ∧ (IV( iv ) @ #later) ∧ ¬(#later = #before)"
*/
by sorry

lemma Key_UsageImpliesInitialization:
  all-traces
  "∀ d k l h #keyUse.
    (UseKey( d, k, h, l ) @ #keyUse) ⇒
    (∃ #keyInit. (InitKey( d, k, h, l ) @ #keyInit) ∧ (#keyInit < #keyUse))"
/*
guarded formula characterizing all counter-examples:
"∃ d k l h #keyUse.
  (UseKey( d, k, h, l ) @ #keyUse)
 ∧
  ∀ #keyInit. (InitKey( d, k, h, l ) @ #keyInit) ⇒ ¬(#keyInit < #keyUse)"
*/
simplify
solve( UseKey( d, k, h, l ) @ #keyUse )
  case Decrypt
  solve( !Device( d ) ▶₀ #keyUse )
    case Device
    solve( !Store( ~device, h, k, l ) ▶₁ #keyUse )
      case Derive
      by contradiction /* from formulas */
    next
      case Key_case_1
      by contradiction /* from formulas */
    next
      case Key_case_2
      by contradiction /* from formulas */
    next
      case SharedKey_case_1
      by contradiction /* from formulas */
    next
      case SharedKey_case_2
      by contradiction /* from formulas */
    next
      case Unwrap
      by contradiction /* from formulas */
    qed
  qed
next
  case Derive
  solve( !Device( d ) ▶₀ #keyUse )
    case Device
    solve( !Store( ~device, h, k, ('1'++'1') ) ▶₁ #keyUse )
      case Derive
      by contradiction /* from formulas */
    next
      case Key
      by contradiction /* from formulas */
    next
      case Unwrap
      by contradiction /* from formulas */
    qed
  qed
next
  case Encrypt
  solve( !Integer( ('1'++ctr) ) ▶₀ #keyUse )
    case Suc
    solve( !Device( d ) ▶₁ #keyUse )
      case Device
      solve( !Store( ~device, h, k, l ) ▶₂ #keyUse )
        case Derive
        by contradiction /* from formulas */
      next
        case Key_case_1
        by contradiction /* from formulas */
      next
        case Key_case_2
        by contradiction /* from formulas */
      next
        case SharedKey_case_1
        by contradiction /* from formulas */
      next
        case SharedKey_case_2
        by contradiction /* from formulas */
      next
        case Unwrap
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Unwrap
  solve( !Integer( z ) ▶₀ #keyUse )
    case One
    by contradiction /* from formulas */
  next
    case Suc
    solve( !Device( d ) ▶₁ #keyUse )
      case Device
      solve( !Store( ~device, h, k, l ) ▶₂ #keyUse )
        case Derive
        by contradiction /* from formulas */
      next
        case Key_case_1
        by contradiction /* from formulas */
      next
        case Key_case_2
        by contradiction /* from formulas */
      next
        case SharedKey_case_1
        by contradiction /* from formulas */
      next
        case SharedKey_case_2
        by contradiction /* from formulas */
      next
        case Unwrap
        by contradiction /* from formulas */
      qed
    qed
  qed
next
  case Wrap
  solve( !Integer( ('1'++ctr) ) ▶₀ #keyUse )
    case Suc
    solve( !Device( d ) ▶₁ #keyUse )
      case Device
      solve( !Store( ~device, h, k, (el++z) ) ▶₂ #keyUse )
        case Derive
        by contradiction /* from formulas */
      next
        case Key_case_1
        by contradiction /* from formulas */
      next
        case Key_case_2
        by contradiction /* from formulas */
      next
        case Key_case_3
        by contradiction /* from formulas */
      next
        case Key_case_4
        by contradiction /* from formulas */
      next
        case SharedKey_case_01
        by contradiction /* from formulas */
      next
        case SharedKey_case_02
        by contradiction /* from formulas */
      next
        case SharedKey_case_03
        by contradiction /* from formulas */
      next
        case SharedKey_case_04
        by contradiction /* from formulas */
      next
        case SharedKey_case_05
        by contradiction /* from formulas */
      next
        case SharedKey_case_06
        by contradiction /* from formulas */
      next
        case SharedKey_case_07
        by contradiction /* from formulas */
      next
        case SharedKey_case_08
        by contradiction /* from formulas */
      next
        case SharedKey_case_09
        by contradiction /* from formulas */
      next
        case SharedKey_case_10
        by contradiction /* from formulas */
      next
        case SharedKey_case_11
        by contradiction /* from formulas */
      next
        case SharedKey_case_12
        by contradiction /* from formulas */
      next
        case SharedKey_case_13
        by contradiction /* from formulas */
      next
        case SharedKey_case_14
        by contradiction /* from formulas */
      next
        case SharedKey_case_15
        by contradiction /* from formulas */
      next
        case SharedKey_case_16
        by contradiction /* from formulas */
      next
        case SharedKey_case_17
        by contradiction /* from formulas */
      next
        case SharedKey_case_18
        by contradiction /* from formulas */
      next
        case SharedKey_case_19
        by contradiction /* from formulas */
      next
        case SharedKey_case_20
        by contradiction /* from formulas */
      next
        case SharedKey_case_21
        by contradiction /* from formulas */
      next
        case SharedKey_case_22
        by contradiction /* from formulas */
      next
        case SharedKey_case_23
        by contradiction /* from formulas */
      next
        case SharedKey_case_24
        by contradiction /* from formulas */
      next
        case SharedKey_case_25
        by contradiction /* from formulas */
      next
        case SharedKey_case_26
        by contradiction /* from formulas */
      next
        case SharedKey_case_27
        by contradiction /* from formulas */
      next
        case SharedKey_case_28
        by contradiction /* from formulas */
      next
        case SharedKey_case_29
        by contradiction /* from formulas */
      next
        case SharedKey_case_30
        by contradiction /* from formulas */
      next
        case SharedKey_case_31
        by contradiction /* from formulas */
      next
        case SharedKey_case_32
        by contradiction /* from formulas */
      next
        case Unwrap_case_1
        by contradiction /* from formulas */
      next
        case Unwrap_case_2
        by contradiction /* from formulas */
      next
        case Unwrap_case_3
        by contradiction /* from formulas */
      next
        case Unwrap_case_4
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma Key_IntegrityAndConfidentiality [use_induction, reuse]:
  all-traces
  "(¬(∃ k l h #keyCreate #keyKU.
       (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU))) ∧
   (∀ d k l h #keyImport.
     (ImportKey( d, k, h, l ) @ #keyImport) ⇒
     (∃ #keyCreate.
       (CreateKey( k, h, l ) @ #keyCreate) ∧ (#keyCreate < #keyImport)))"
/*
guarded formula characterizing all counter-examples:
"((∃ k l h #keyCreate #keyKU.
    (CreateKey( k, h, l ) @ #keyCreate) ∧ (!KU( k ) @ #keyKU)) ∨
  (∃ d k l h #keyImport.
    (ImportKey( d, k, h, l ) @ #keyImport)
   ∧
    ∀ #keyCreate.
     (CreateKey( k, h, l ) @ #keyCreate) ⇒ ¬(#keyCreate < #keyImport)))"
*/
by sorry

lemma Key_UniqueLevelandHandle [reuse]:
  all-traces
  "∀ d D k l L h H #i #j.
    ((InitKey( d, k, h, l ) @ #i) ∧ (InitKey( D, k, H, L ) @ #j)) ⇒
    ((l = L) ∧ (h = H))"
/*
guarded formula characterizing all counter-examples:
"∃ d D k l L h H #i #j.
  (InitKey( d, k, h, l ) @ #i) ∧ (InitKey( D, k, H, L ) @ #j)
 ∧
  ((¬(l = L)) ∨ (¬(h = H)))"
*/
by sorry





















/* All wellformedness checks were successful. */

/*
Generated from:
Tamarin version 1.11.0
Maude version 3.2 (unsupported)
Git revision: 969dfd42c08c2ce22a167f070680cf392570fedf (with uncommited changes), branch: develop
Compiled at: 2025-02-18 09:44:08.195281873 UTC
*/

end