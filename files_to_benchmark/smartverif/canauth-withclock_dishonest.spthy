theory CANauth begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: check_rep/2, fst/1, get_rep/1, hmac/2, p1/1, p2/1, pair/2,
           pi/2, rep/2 [private], snd/1
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    p1(pi(a, b)) = a,
    p2(pi(a, b)) = b,
    snd(<x.1, x.2>) = x.2

section{* CANauth protocol *}

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_:
   [ State_( ) ] --> [ State_1( ), State_2( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1:
   [ State_1( ) ] --> [ !Semistate_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1:
   [ !Semistate_11( ) ] --> [ State_11( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_sk_11:
   [ State_11( ), Fr( sk ) ] --> [ State_111( sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_cellA_111:
   [ State_111( sk ), Fr( cellA ) ] --> [ State_1111( cellA, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_cellA_pi_zero_zero__1111:
   [ State_1111( cellA, sk ) ]
  --[ Insert( cellA, pi('zero', 'zero') ) ]->
   [ State_11111( cellA, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_cellB_11111:
   [ State_11111( cellA, sk ), Fr( cellB ) ]
  -->
   [ State_111111( cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_cellB_pi_zero_zero__111111:
   [ State_111111( cellA, cellB, sk ) ]
  --[ Insert( cellB, pi('zero', 'zero') ) ]->
   [ State_1111111( cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1111111:
   [ State_1111111( cellA, cellB, sk ) ]
  -->
   [ !Semistate_11111111( cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1111111:
   [ !Semistate_11111111( cellA, cellB, sk ) ]
  -->
   [ State_11111111( cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111111:
   [ State_11111111( cellA, cellB, sk ) ]
  -->
   [
   State_111111111( cellA, cellB, sk ), State_111111112( cellA, cellB, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111111111:
   [ State_111111111( cellA, cellB, sk ) ]
  -->
   [
   State_1111111111( cellA, cellB, sk ),
   State_1111111112( cellA, cellB, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1111111111:
   [ State_1111111111( cellA, cellB, sk ) ]
  -->
   [
   State_11111111111( cellA, cellB, sk ),
   State_11111111112( cellA, cellB, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_cellA_11111111111[color=#569dc0]:
   [ State_11111111111( cellA, cellB, sk ), Fr( ~lock9 ) ]
  --[ Lock( $9, ~lock9, cellA ), Lock_9( $9, ~lock9, cellA ) ]->
   [ State_111111111111( ~lock9, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellA_as_data_0_111111111111[color=#569dc0]:
   [ State_111111111111( ~lock9, cellA, cellB, sk ) ]
  --[ IsIn( cellA, data ) ]->
   [ State_1111111111111( ~lock9, cellA, cellB, data, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellA_as_data_1_111111111111[color=#569dc0]:
   [ State_111111111111( ~lock9, cellA, cellB, sk ) ]
  --[ IsNotSet( cellA ) ]->
   [ State_1111111111112( ~lock9, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_msg_SIGN_j_h__1111111111111[color=#569dc0]:
   [
   State_1111111111111( ~lock9, cellA, cellB, data, sk ),
   In( <msg, 'SIGN', j, h> )
   ]
  -->
   [ State_11111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_smallerp2data_j_0_11111111111111[color=#569dc0]:
   [ State_11111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_smaller( p2(data), j ) ]->
   [ State_111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /*
  rule (modulo AC) if_smallerp2data_j_0_11111111111111[color=#569dc0]:
     [ State_11111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    --[ Pred_smaller( z, j ) ]->
     [ State_111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.10, x.11)
       z     = x.11
  */

rule (modulo E) if_smallerp2data_j_1_11111111111111[color=#569dc0]:
   [ State_11111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_not_smaller( p2(data), j ) ]->
   [ State_111111111111112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /*
  rule (modulo AC) if_smallerp2data_j_1_11111111111111[color=#569dc0]:
     [ State_11111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    --[ Pred_not_smaller( z, j ) ]->
     [ State_111111111111112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.10, x.11)
       z     = x.11
  */

rule (modulo E) if_eqh_hmacsk_j_msg__0_111111111111111[color=#569dc0]:
   [ State_111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_eq( h, hmac(sk, <j, msg>) ) ]->
   [ State_1111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqh_hmacsk_j_msg__1_111111111111111[color=#569dc0]:
   [ State_111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_not_eq( h, hmac(sk, <j, msg>) ) ]->
   [ State_1111111111111112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Receivedsk_msg_j_1111111111111111[color=#569dc0]:
   [ State_1111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Event( ), Received( sk, msg, j ) ]->
   [ State_11111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_cellA_pip1data__one__j_11111111111111111[color=#569dc0]:
   [ State_11111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Insert( cellA, pi(('one'+p1(data)), j) ) ]->
   [ State_111111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /*
  rule (modulo AC) insert_cellA_pip1data__one__j_11111111111111111[color=#569dc0]:
     [ State_11111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    --[ Insert( cellA, pi(('one'+z), j) ) ]->
     [ State_111111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.12
       z     = p1(data.12)
    
    2. data  = pi(z.13, x.15)
       z     = z.13
  */

rule (modulo E) unlock_cellA_111111111111111111[color=#569dc0]:
   [ State_111111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Unlock( $9, ~lock9, cellA ), Unlock_9( $9, ~lock9, cellA ) ]->
   [ State_1111111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111111111111[color=#569dc0]:
   [ State_1111111111111111111( ~lock9, cellA, cellB, data, h, j, msg, sk )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_cellA_1111111111111112[color=#569dc0]:
   [ State_1111111111111112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Unlock( $9, ~lock9, cellA ), Unlock_9( $9, ~lock9, cellA ) ]->
   [ State_11111111111111121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111111111111121[color=#569dc0]:
   [ State_11111111111111121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_cellA_111111111111112[color=#569dc0]:
   [ State_111111111111112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Unlock( $9, ~lock9, cellA ), Unlock_9( $9, ~lock9, cellA ) ]->
   [ State_1111111111111121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111111121[color=#569dc0]:
   [ State_1111111111111121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111112[color=#569dc0]:
   [ State_1111111111112( ~lock9, cellA, cellB, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_cellA_11111111112[color=#2cd719]:
   [ State_11111111112( cellA, cellB, sk ), Fr( ~lock8 ) ]
  --[ Lock( $8, ~lock8, cellA ), Lock_8( $8, ~lock8, cellA ) ]->
   [ State_111111111121( ~lock8, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellA_as_data_0_111111111121[color=#2cd719]:
   [ State_111111111121( ~lock8, cellA, cellB, sk ) ]
  --[ IsIn( cellA, data ) ]->
   [ State_1111111111211( ~lock8, cellA, cellB, data, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellA_as_data_1_111111111121[color=#2cd719]:
   [ State_111111111121( ~lock8, cellA, cellB, sk ) ]
  --[ IsNotSet( cellA ) ]->
   [ State_1111111111212( ~lock8, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_msg_1111111111211[color=#2cd719]:
   [ State_1111111111211( ~lock8, cellA, cellB, data, sk ), Fr( msg ) ]
  -->
   [ State_11111111112111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Sentsk_msg_p2data__one__11111111112111[color=#2cd719]:
   [ State_11111111112111( ~lock8, cellA, cellB, data, msg, sk ) ]
  --[ Event( ), Sent( sk, msg, ('one'+p2(data)) ) ]->
   [ State_111111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /*
  rule (modulo AC) event_Sentsk_msg_p2data__one__11111111112111[color=#2cd719]:
     [ State_11111111112111( ~lock8, cellA, cellB, data, msg, sk ) ]
    --[ Event( ), Sent( sk, msg, ('one'+z) ) ]->
     [ State_111111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.12, z.11)
       z     = z.11
  */

rule (modulo E) out_msg_SIGN_p2data__one__hmacsk_p2data__one__msg___111111111121111[color=#2cd719]:
   [ State_111111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]
  -->
   [
   State_1111111111211111( ~lock8, cellA, cellB, data, msg, sk ),
   Out( <msg, 'SIGN', ('one'+p2(data)), hmac(sk, <('one'+p2(data)), msg>)> )
   ]

  /*
  rule (modulo AC) out_msg_SIGN_p2data__one__hmacsk_p2data__one__msg___111111111121111[color=#2cd719]:
     [ State_111111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]
    -->
     [
     State_1111111111211111( ~lock8, cellA, cellB, data, msg, sk ),
     Out( <msg, 'SIGN', ('one'+z), hmac(sk, <('one'+z), msg>)> )
     ]
    variants (modulo AC)
    1. data  = data.11
       z     = p2(data.11)
    
    2. data  = pi(x.14, z.12)
       z     = z.12
  */

rule (modulo E) insert_cellA_pip1data__one__p2data__one__1111111111211111[color=#2cd719]:
   [ State_1111111111211111( ~lock8, cellA, cellB, data, msg, sk ) ]
  --[ Insert( cellA, pi(('one'+p1(data)), ('one'+p2(data))) ) ]->
   [ State_11111111112111111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /*
  rule (modulo AC) insert_cellA_pip1data__one__p2data__one__1111111111211111[color=#2cd719]:
     [ State_1111111111211111( ~lock8, cellA, cellB, data, msg, sk ) ]
    --[ Insert( cellA, pi(('one'+z), ('one'+z.1)) ) ]->
     [ State_11111111112111111( ~lock8, cellA, cellB, data, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.11
       z     = p1(data.11)
       z.1   = p2(data.11)
    
    2. data  = pi(z.12, z.13)
       z     = z.12
       z.1   = z.13
  */

rule (modulo E) unlock_cellA_11111111112111111[color=#2cd719]:
   [ State_11111111112111111( ~lock8, cellA, cellB, data, msg, sk ) ]
  --[ Unlock( $8, ~lock8, cellA ), Unlock_8( $8, ~lock8, cellA ) ]->
   [ State_111111111121111111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111111121111111[color=#2cd719]:
   [ State_111111111121111111( ~lock8, cellA, cellB, data, msg, sk ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111212[color=#2cd719]:
   [ State_1111111111212( ~lock8, cellA, cellB, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_cellB_1111111112[color=#11ec28]:
   [ State_1111111112( cellA, cellB, sk ), Fr( ~lock9 ) ]
  --[ Lock( $9, ~lock9, cellB ), Lock_9( $9, ~lock9, cellB ) ]->
   [ State_11111111121( ~lock9, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellB_as_data_0_11111111121[color=#11ec28]:
   [ State_11111111121( ~lock9, cellA, cellB, sk ) ]
  --[ IsIn( cellB, data ) ]->
   [ State_111111111211( ~lock9, cellA, cellB, data, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellB_as_data_1_11111111121[color=#11ec28]:
   [ State_11111111121( ~lock9, cellA, cellB, sk ) ]
  --[ IsNotSet( cellB ) ]->
   [ State_111111111212( ~lock9, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_msg_SIGN_j_h__111111111211[color=#11ec28]:
   [
   State_111111111211( ~lock9, cellA, cellB, data, sk ),
   In( <msg, 'SIGN', j, h> )
   ]
  -->
   [ State_1111111112111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_smallerp2data_j_0_1111111112111[color=#11ec28]:
   [ State_1111111112111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_smaller( p2(data), j ) ]->
   [ State_11111111121111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /*
  rule (modulo AC) if_smallerp2data_j_0_1111111112111[color=#11ec28]:
     [ State_1111111112111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    --[ Pred_smaller( z, j ) ]->
     [ State_11111111121111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.10, x.11)
       z     = x.11
  */

rule (modulo E) if_smallerp2data_j_1_1111111112111[color=#11ec28]:
   [ State_1111111112111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_not_smaller( p2(data), j ) ]->
   [ State_11111111121112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /*
  rule (modulo AC) if_smallerp2data_j_1_1111111112111[color=#11ec28]:
     [ State_1111111112111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    --[ Pred_not_smaller( z, j ) ]->
     [ State_11111111121112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.10, x.11)
       z     = x.11
  */

rule (modulo E) if_eqh_hmacsk_j_msg__0_11111111121111[color=#11ec28]:
   [ State_11111111121111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_eq( h, hmac(sk, <j, msg>) ) ]->
   [ State_111111111211111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqh_hmacsk_j_msg__1_11111111121111[color=#11ec28]:
   [ State_11111111121111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Pred_not_eq( h, hmac(sk, <j, msg>) ) ]->
   [ State_111111111211112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Receivedsk_msg_j_111111111211111[color=#11ec28]:
   [ State_111111111211111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Event( ), Received( sk, msg, j ) ]->
   [ State_1111111112111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_cellB_pip1data__one__j_1111111112111111[color=#11ec28]:
   [ State_1111111112111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Insert( cellB, pi(('one'+p1(data)), j) ) ]->
   [ State_11111111121111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /*
  rule (modulo AC) insert_cellB_pip1data__one__j_1111111112111111[color=#11ec28]:
     [ State_1111111112111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    --[ Insert( cellB, pi(('one'+z), j) ) ]->
     [ State_11111111121111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.12
       z     = p1(data.12)
    
    2. data  = pi(z.13, x.15)
       z     = z.13
  */

rule (modulo E) unlock_cellB_11111111121111111[color=#11ec28]:
   [ State_11111111121111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Unlock( $9, ~lock9, cellB ), Unlock_9( $9, ~lock9, cellB ) ]->
   [ State_111111111211111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111111211111111[color=#11ec28]:
   [ State_111111111211111111( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_cellB_111111111211112[color=#11ec28]:
   [ State_111111111211112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Unlock( $9, ~lock9, cellB ), Unlock_9( $9, ~lock9, cellB ) ]->
   [ State_1111111112111121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111112111121[color=#11ec28]:
   [ State_1111111112111121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_cellB_11111111121112[color=#11ec28]:
   [ State_11111111121112( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  --[ Unlock( $9, ~lock9, cellB ), Unlock_9( $9, ~lock9, cellB ) ]->
   [ State_111111111211121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111111211121[color=#11ec28]:
   [ State_111111111211121( ~lock9, cellA, cellB, data, h, j, msg, sk ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111111212[color=#11ec28]:
   [ State_111111111212( ~lock9, cellA, cellB, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_cellB_111111112[color=#45d1e2]:
   [ State_111111112( cellA, cellB, sk ), Fr( ~lock8 ) ]
  --[ Lock( $8, ~lock8, cellB ), Lock_8( $8, ~lock8, cellB ) ]->
   [ State_1111111121( ~lock8, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellB_as_data_0_1111111121[color=#45d1e2]:
   [ State_1111111121( ~lock8, cellA, cellB, sk ) ]
  --[ IsIn( cellB, data ) ]->
   [ State_11111111211( ~lock8, cellA, cellB, data, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellB_as_data_1_1111111121[color=#45d1e2]:
   [ State_1111111121( ~lock8, cellA, cellB, sk ) ]
  --[ IsNotSet( cellB ) ]->
   [ State_11111111212( ~lock8, cellA, cellB, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_msg_11111111211[color=#45d1e2]:
   [ State_11111111211( ~lock8, cellA, cellB, data, sk ), Fr( msg ) ]
  -->
   [ State_111111112111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Sentsk_msg_p2data__one__111111112111[color=#45d1e2]:
   [ State_111111112111( ~lock8, cellA, cellB, data, msg, sk ) ]
  --[ Event( ), Sent( sk, msg, ('one'+p2(data)) ) ]->
   [ State_1111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /*
  rule (modulo AC) event_Sentsk_msg_p2data__one__111111112111[color=#45d1e2]:
     [ State_111111112111( ~lock8, cellA, cellB, data, msg, sk ) ]
    --[ Event( ), Sent( sk, msg, ('one'+z) ) ]->
     [ State_1111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.12, z.11)
       z     = z.11
  */

rule (modulo E) out_msg_SIGN_p2data__one__hmacsk_p2data__one__msg___1111111121111[color=#45d1e2]:
   [ State_1111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]
  -->
   [
   State_11111111211111( ~lock8, cellA, cellB, data, msg, sk ),
   Out( <msg, 'SIGN', ('one'+p2(data)), hmac(sk, <('one'+p2(data)), msg>)> )
   ]

  /*
  rule (modulo AC) out_msg_SIGN_p2data__one__hmacsk_p2data__one__msg___1111111121111[color=#45d1e2]:
     [ State_1111111121111( ~lock8, cellA, cellB, data, msg, sk ) ]
    -->
     [
     State_11111111211111( ~lock8, cellA, cellB, data, msg, sk ),
     Out( <msg, 'SIGN', ('one'+z), hmac(sk, <('one'+z), msg>)> )
     ]
    variants (modulo AC)
    1. data  = data.11
       z     = p2(data.11)
    
    2. data  = pi(x.14, z.12)
       z     = z.12
  */

rule (modulo E) insert_cellB_pip1data__one__p2data__one__11111111211111[color=#45d1e2]:
   [ State_11111111211111( ~lock8, cellA, cellB, data, msg, sk ) ]
  --[ Insert( cellB, pi(('one'+p1(data)), ('one'+p2(data))) ) ]->
   [ State_111111112111111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /*
  rule (modulo AC) insert_cellB_pip1data__one__p2data__one__11111111211111[color=#45d1e2]:
     [ State_11111111211111( ~lock8, cellA, cellB, data, msg, sk ) ]
    --[ Insert( cellB, pi(('one'+z), ('one'+z.1)) ) ]->
     [ State_111111112111111( ~lock8, cellA, cellB, data, msg, sk ) ]
    variants (modulo AC)
    1. data  = data.11
       z     = p1(data.11)
       z.1   = p2(data.11)
    
    2. data  = pi(z.12, z.13)
       z     = z.12
       z.1   = z.13
  */

rule (modulo E) unlock_cellB_111111112111111[color=#45d1e2]:
   [ State_111111112111111( ~lock8, cellA, cellB, data, msg, sk ) ]
  --[ Unlock( $8, ~lock8, cellB ), Unlock_8( $8, ~lock8, cellB ) ]->
   [ State_1111111121111111( ~lock8, cellA, cellB, data, msg, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111121111111[color=#45d1e2]:
   [ State_1111111121111111( ~lock8, cellA, cellB, data, msg, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111111212[color=#45d1e2]:
   [ State_11111111212( ~lock8, cellA, cellB, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_2:
   [ State_2( ) ] --> [ !Semistate_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_2:
   [ !Semistate_21( ) ] --> [ State_21( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_skb_21:
   [ State_21( ), Fr( skb ) ] --> [ State_211( skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_skb_211:
   [ State_211( skb ) ] --> [ State_2111( skb ), Out( skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_cellAb_2111:
   [ State_2111( skb ), Fr( cellAb ) ] --> [ State_21111( cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_cellAb_pi_zero_zero__21111:
   [ State_21111( cellAb, skb ) ]
  --[ Insert( cellAb, pi('zero', 'zero') ) ]->
   [ State_211111( cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_211111:
   [ State_211111( cellAb, skb ) ] --> [ !Semistate_2111111( cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_211111:
   [ !Semistate_2111111( cellAb, skb ) ]
  -->
   [ State_2111111( cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_2111111:
   [ State_2111111( cellAb, skb ) ]
  -->
   [ State_21111111( cellAb, skb ), State_21111112( cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_cellAb_21111111[color=#9f76cd]:
   [ State_21111111( cellAb, skb ), Fr( ~lock8 ) ]
  --[ Lock( $8, ~lock8, cellAb ), Lock_8( $8, ~lock8, cellAb ) ]->
   [ State_211111111( ~lock8, cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellAb_as_data_0_211111111[color=#9f76cd]:
   [ State_211111111( ~lock8, cellAb, skb ) ]
  --[ IsIn( cellAb, data ) ]->
   [ State_2111111111( ~lock8, cellAb, data, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellAb_as_data_1_211111111[color=#9f76cd]:
   [ State_211111111( ~lock8, cellAb, skb ) ]
  --[ IsNotSet( cellAb ) ]->
   [ State_2111111112( ~lock8, cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_msg_SIGN_j_h__2111111111[color=#9f76cd]:
   [
   State_2111111111( ~lock8, cellAb, data, skb ), In( <msg, 'SIGN', j, h> )
   ]
  -->
   [ State_21111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_smallerp2data_j_0_21111111111[color=#9f76cd]:
   [ State_21111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Pred_smaller( p2(data), j ) ]->
   [ State_211111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /*
  rule (modulo AC) if_smallerp2data_j_0_21111111111[color=#9f76cd]:
     [ State_21111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
    --[ Pred_smaller( z, j ) ]->
     [ State_211111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
    variants (modulo AC)
    1. data  = data.9
       z     = p2(data.9)
    
    2. data  = pi(x.9, x.10)
       z     = x.10
  */

rule (modulo E) if_smallerp2data_j_1_21111111111[color=#9f76cd]:
   [ State_21111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Pred_not_smaller( p2(data), j ) ]->
   [ State_211111111112( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /*
  rule (modulo AC) if_smallerp2data_j_1_21111111111[color=#9f76cd]:
     [ State_21111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
    --[ Pred_not_smaller( z, j ) ]->
     [ State_211111111112( ~lock8, cellAb, data, h, j, msg, skb ) ]
    variants (modulo AC)
    1. data  = data.9
       z     = p2(data.9)
    
    2. data  = pi(x.9, x.10)
       z     = x.10
  */

rule (modulo E) if_eqh_hmacskb_j_msg__0_211111111111[color=#9f76cd]:
   [ State_211111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Pred_eq( h, hmac(skb, <j, msg>) ) ]->
   [ State_2111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqh_hmacskb_j_msg__1_211111111111[color=#9f76cd]:
   [ State_211111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Pred_not_eq( h, hmac(skb, <j, msg>) ) ]->
   [ State_2111111111112( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_cellAb_pip1data__one__j_2111111111111[color=#9f76cd]:
   [ State_2111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Insert( cellAb, pi(('one'+p1(data)), j) ) ]->
   [ State_21111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /*
  rule (modulo AC) insert_cellAb_pip1data__one__j_2111111111111[color=#9f76cd]:
     [ State_2111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
    --[ Insert( cellAb, pi(('one'+z), j) ) ]->
     [ State_21111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
    variants (modulo AC)
    1. data  = data.11
       z     = p1(data.11)
    
    2. data  = pi(z.12, x.14)
       z     = z.12
  */

rule (modulo E) unlock_cellAb_21111111111111[color=#9f76cd]:
   [ State_21111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Unlock( $8, ~lock8, cellAb ), Unlock_8( $8, ~lock8, cellAb ) ]->
   [ State_211111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_211111111111111[color=#9f76cd]:
   [ State_211111111111111( ~lock8, cellAb, data, h, j, msg, skb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_cellAb_2111111111112[color=#9f76cd]:
   [ State_2111111111112( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Unlock( $8, ~lock8, cellAb ), Unlock_8( $8, ~lock8, cellAb ) ]->
   [ State_21111111111121( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_21111111111121[color=#9f76cd]:
   [ State_21111111111121( ~lock8, cellAb, data, h, j, msg, skb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_cellAb_211111111112[color=#9f76cd]:
   [ State_211111111112( ~lock8, cellAb, data, h, j, msg, skb ) ]
  --[ Unlock( $8, ~lock8, cellAb ), Unlock_8( $8, ~lock8, cellAb ) ]->
   [ State_2111111111121( ~lock8, cellAb, data, h, j, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2111111111121[color=#9f76cd]:
   [ State_2111111111121( ~lock8, cellAb, data, h, j, msg, skb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2111111112[color=#9f76cd]:
   [ State_2111111112( ~lock8, cellAb, skb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_cellAb_21111112[color=#ee415c]:
   [ State_21111112( cellAb, skb ), Fr( ~lock8 ) ]
  --[ Lock( $8, ~lock8, cellAb ), Lock_8( $8, ~lock8, cellAb ) ]->
   [ State_211111121( ~lock8, cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellAb_as_data_0_211111121[color=#ee415c]:
   [ State_211111121( ~lock8, cellAb, skb ) ]
  --[ IsIn( cellAb, data ) ]->
   [ State_2111111211( ~lock8, cellAb, data, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_cellAb_as_data_1_211111121[color=#ee415c]:
   [ State_211111121( ~lock8, cellAb, skb ) ]
  --[ IsNotSet( cellAb ) ]->
   [ State_2111111212( ~lock8, cellAb, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_msg_2111111211[color=#ee415c]:
   [ State_2111111211( ~lock8, cellAb, data, skb ), Fr( msg ) ]
  -->
   [ State_21111112111( ~lock8, cellAb, data, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Sentskb_msg_p2data__one__21111112111[color=#ee415c]:
   [ State_21111112111( ~lock8, cellAb, data, msg, skb ) ]
  --[ Event( ), Sent( skb, msg, ('one'+p2(data)) ) ]->
   [ State_211111121111( ~lock8, cellAb, data, msg, skb ) ]

  /*
  rule (modulo AC) event_Sentskb_msg_p2data__one__21111112111[color=#ee415c]:
     [ State_21111112111( ~lock8, cellAb, data, msg, skb ) ]
    --[ Event( ), Sent( skb, msg, ('one'+z) ) ]->
     [ State_211111121111( ~lock8, cellAb, data, msg, skb ) ]
    variants (modulo AC)
    1. data  = data.9
       z     = p2(data.9)
    
    2. data  = pi(x.11, z.10)
       z     = z.10
  */

rule (modulo E) out_msg_SIGN_p2data__one__hmacskb_p2data__one__msg___211111121111[color=#ee415c]:
   [ State_211111121111( ~lock8, cellAb, data, msg, skb ) ]
  -->
   [
   State_2111111211111( ~lock8, cellAb, data, msg, skb ),
   Out( <msg, 'SIGN', ('one'+p2(data)), hmac(skb, <('one'+p2(data)), msg>)>
   )
   ]

  /*
  rule (modulo AC) out_msg_SIGN_p2data__one__hmacskb_p2data__one__msg___211111121111[color=#ee415c]:
     [ State_211111121111( ~lock8, cellAb, data, msg, skb ) ]
    -->
     [
     State_2111111211111( ~lock8, cellAb, data, msg, skb ),
     Out( <msg, 'SIGN', ('one'+z), hmac(skb, <('one'+z), msg>)> )
     ]
    variants (modulo AC)
    1. data  = data.10
       z     = p2(data.10)
    
    2. data  = pi(x.13, z.11)
       z     = z.11
  */

rule (modulo E) insert_cellAb_pip1data__one__p2data__one__2111111211111[color=#ee415c]:
   [ State_2111111211111( ~lock8, cellAb, data, msg, skb ) ]
  --[ Insert( cellAb, pi(('one'+p1(data)), ('one'+p2(data))) ) ]->
   [ State_21111112111111( ~lock8, cellAb, data, msg, skb ) ]

  /*
  rule (modulo AC) insert_cellAb_pip1data__one__p2data__one__2111111211111[color=#ee415c]:
     [ State_2111111211111( ~lock8, cellAb, data, msg, skb ) ]
    --[ Insert( cellAb, pi(('one'+z), ('one'+z.1)) ) ]->
     [ State_21111112111111( ~lock8, cellAb, data, msg, skb ) ]
    variants (modulo AC)
    1. data  = data.10
       z     = p1(data.10)
       z.1   = p2(data.10)
    
    2. data  = pi(z.11, z.12)
       z     = z.11
       z.1   = z.12
  */

rule (modulo E) unlock_cellAb_21111112111111[color=#ee415c]:
   [ State_21111112111111( ~lock8, cellAb, data, msg, skb ) ]
  --[ Unlock( $8, ~lock8, cellAb ), Unlock_8( $8, ~lock8, cellAb ) ]->
   [ State_211111121111111( ~lock8, cellAb, data, msg, skb ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_211111121111111[color=#ee415c]:
   [ State_211111121111111( ~lock8, cellAb, data, msg, skb ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_2111111212[color=#ee415c]:
   [ State_2111111212( ~lock8, cellAb, skb ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_9:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_9( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_9( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_8:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_8( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_8( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction predicate1:
  "∀ #i a b. (Pred_not_smaller( a, b ) @ #i) ⇒ (¬(∃ z. (a+z) = b))"
  // safety formula

restriction predicate0:
  "∀ #i a b. (Pred_smaller( a, b ) @ #i) ⇒ (∃ z. (a+z) = b)"

lemma Received_only_if_Send:
  all-traces
  "∀ sk msg i #u.
    (Received( sk, msg, i ) @ #u) ⇒
    (∃ #v. (#v < #u) ∧ (Sent( sk, msg, i ) @ #v))"
/*
guarded formula characterizing all counter-examples:
"∃ sk msg i #u.
  (Received( sk, msg, i ) @ #u)
 ∧
  ∀ #v. (Sent( sk, msg, i ) @ #v) ⇒ ¬(#v < #u)"
*/
by sorry

lemma wellformed_Received:
  all-traces
  "∀ sk msg1 i1 msg2 i2 #u #v.
    ((Received( sk, msg1, i1 ) @ #u) ∧ (Received( sk, msg2, i2 ) @ #v)) ⇒
    (((msg1 = msg2) ∧ (i1 = i2)) ∨ ((¬(msg1 = msg2)) ∧ (¬(i1 = i2))))"
/*
guarded formula characterizing all counter-examples:
"∃ sk msg1 i1 msg2 i2 #u #v.
  (Received( sk, msg1, i1 ) @ #u) ∧ (Received( sk, msg2, i2 ) @ #v)
 ∧
  (((¬(msg1 = msg2)) ∨ (¬(i1 = i2)))) ∧ (((msg1 = msg2) ∨ (i1 = i2)))"
*/
by sorry

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_cellA_as_data_0_111111111111' has unbound variables: 
    data
  
  rule `lookup_cellA_as_data_0_111111111121' has unbound variables: 
    data
  
  rule `lookup_cellB_as_data_0_11111111121' has unbound variables: 
    data
  
  rule `lookup_cellB_as_data_0_1111111121' has unbound variables: 
    data
  
  rule `lookup_cellAb_as_data_0_211111111' has unbound variables: 
    data
  
  rule `lookup_cellAb_as_data_0_211111121' has unbound variables: 
    data

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end