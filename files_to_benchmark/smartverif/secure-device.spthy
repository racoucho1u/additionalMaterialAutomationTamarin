theory StatVerif_Security_Device begin

// Function signature and definition of the equational theory E

functions: adec/2, aenc/2, check_rep/2, fst/1, get_rep/1, pair/2, pk/1,
           rep/2 [private], snd/1
equations:
    adec(aenc(x.1, pk(x.2)), x.2) = x.1,
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_sk_1:
   [ State_1( ), Fr( sk ) ] --> [ State_11( sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_s_11:
   [ State_11( sk ), Fr( s ) ] --> [ State_111( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_init__111:
   [ State_111( s, sk ) ]
  --[ Insert( s, 'init' ) ]->
   [ State_1111( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1111:
   [ State_1111( s, sk ) ]
  -->
   [ State_11111( s, sk ), State_11112( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111[color=#569dc0]:
   [ State_11111( s, sk ) ]
  -->
   [ State_111111( s, sk ), State_111112( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111111[color=#569dc0]:
   [ State_111111( s, sk ) ]
  -->
   [ State_1111111( s, sk ), State_1111112( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_pksk_1111111[color=#569dc0]:
   [ State_1111111( s, sk ) ] --> [ State_11111111( s, sk ), Out( pk(sk) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111111[color=#569dc0]:
   [ State_11111111( s, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1111112[color=#569dc0]:
   [ State_1111112( s, sk ) ] --> [ !Semistate_11111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1111112[color=#569dc0]:
   [ !Semistate_11111121( s, sk ) ] --> [ State_11111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_s_11111121[color=#569dc0]:
   [ State_11111121( s, sk ), Fr( ~lock10 ) ]
  --[ Lock( $10, ~lock10, s ), Lock_10( $10, ~lock10, s ) ]->
   [ State_111111211( ~lock10, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_req_111111211[color=#569dc0]:
   [ State_111111211( ~lock10, s, sk ), In( req ) ]
  -->
   [ State_1111112111( ~lock10, req, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_0_1111112111[color=#569dc0]:
   [ State_1111112111( ~lock10, req, s, sk ) ]
  --[ IsIn( s, status ) ]->
   [ State_11111121111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_1_1111112111[color=#569dc0]:
   [ State_1111112111( ~lock10, req, s, sk ) ]
  --[ IsNotSet( s ) ]->
   [ State_11111121112( ~lock10, req, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_init__0_11111121111[color=#569dc0]:
   [ State_11111121111( ~lock10, req, s, sk, status ) ]
  --[ Pred_eq( status, 'init' ) ]->
   [ State_111111211111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_init__1_11111121111[color=#569dc0]:
   [ State_11111121111( ~lock10, req, s, sk, status ) ]
  --[ Pred_not_eq( status, 'init' ) ]->
   [ State_111111211112( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_left__0_111111211111[color=#569dc0]:
   [ State_111111211111( ~lock10, req, s, sk, status ) ]
  --[ Pred_eq( req, 'left' ) ]->
   [ State_1111112111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_left__1_111111211111[color=#569dc0]:
   [ State_111111211111( ~lock10, req, s, sk, status ) ]
  --[ Pred_not_eq( req, 'left' ) ]->
   [ State_1111112111112( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_InitDevices_1111112111111[color=#569dc0]:
   [ State_1111112111111( ~lock10, req, s, sk, status ) ]
  --[ Event( ), InitDevice( s ) ]->
   [ State_11111121111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_req_11111121111111[color=#569dc0]:
   [ State_11111121111111( ~lock10, req, s, sk, status ) ]
  --[ Insert( s, req ) ]->
   [ State_111111211111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_111111211111111[color=#569dc0]:
   [ State_111111211111111( ~lock10, req, s, sk, status ) ]
  --[ Unlock( $10, ~lock10, s ), Unlock_10( $10, ~lock10, s ) ]->
   [ State_1111112111111111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111112111111111[color=#569dc0]:
   [ State_1111112111111111( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_right__0_1111112111112[color=#569dc0]:
   [ State_1111112111112( ~lock10, req, s, sk, status ) ]
  --[ Pred_eq( req, 'right' ) ]->
   [ State_11111121111121( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqreq_right__1_1111112111112[color=#569dc0]:
   [ State_1111112111112( ~lock10, req, s, sk, status ) ]
  --[ Pred_not_eq( req, 'right' ) ]->
   [ State_11111121111122( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_InitDevices_11111121111121[color=#569dc0]:
   [ State_11111121111121( ~lock10, req, s, sk, status ) ]
  --[ Event( ), InitDevice( s ) ]->
   [ State_111111211111211( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_s_req_111111211111211[color=#569dc0]:
   [ State_111111211111211( ~lock10, req, s, sk, status ) ]
  --[ Insert( s, req ) ]->
   [ State_1111112111112111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_1111112111112111[color=#569dc0]:
   [ State_1111112111112111( ~lock10, req, s, sk, status ) ]
  --[ Unlock( $10, ~lock10, s ), Unlock_10( $10, ~lock10, s ) ]->
   [ State_11111121111121111( ~lock10, req, s, sk, status ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121111121111[color=#569dc0]:
   [ State_11111121111121111( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121111122[color=#569dc0]:
   [ State_11111121111122( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111111211112[color=#569dc0]:
   [ State_111111211112( ~lock10, req, s, sk, status ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121112[color=#569dc0]:
   [ State_11111121112( ~lock10, req, s, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111112[color=#569dc0]:
   [ State_111112( s, sk ) ] --> [ !Semistate_1111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111112[color=#569dc0]:
   [ !Semistate_1111121( s, sk ) ] --> [ State_1111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_s_1111121[color=#569dc0]:
   [ State_1111121( s, sk ), Fr( ~lock9 ) ]
  --[ Lock( $9, ~lock9, s ), Lock_9( $9, ~lock9, s ) ]->
   [ State_11111211( ~lock9, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_aenc_x_y_pksk_11111211[color=#569dc0]:
   [ State_11111211( ~lock9, s, sk ), In( aenc(<x, y>, pk(sk)) ) ]
  -->
   [ State_111112111( ~lock9, s, sk, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_0_111112111[color=#569dc0]:
   [ State_111112111( ~lock9, s, sk, x, y ) ]
  --[ IsIn( s, status ) ]->
   [ State_1111121111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_s_as_status_1_111112111[color=#569dc0]:
   [ State_111112111( ~lock9, s, sk, x, y ) ]
  --[ IsNotSet( s ) ]->
   [ State_1111121112( ~lock9, s, sk, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_left__0_1111121111[color=#569dc0]:
   [ State_1111121111( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_eq( status, 'left' ) ]->
   [ State_11111211111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_left__1_1111121111[color=#569dc0]:
   [ State_1111121111( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_not_eq( status, 'left' ) ]->
   [ State_11111211112( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Accessx_11111211111[color=#569dc0]:
   [ State_11111211111( ~lock9, s, sk, status, x, y ) ]
  --[ Event( ), Access( x ) ]->
   [ State_111112111111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_x_111112111111[color=#569dc0]:
   [ State_111112111111( ~lock9, s, sk, status, x, y ) ]
  -->
   [ State_1111121111111( ~lock9, s, sk, status, x, y ), Out( x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_1111121111111[color=#569dc0]:
   [ State_1111121111111( ~lock9, s, sk, status, x, y ) ]
  --[ Unlock( $9, ~lock9, s ), Unlock_9( $9, ~lock9, s ) ]->
   [ State_11111211111111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111211111111[color=#569dc0]:
   [ State_11111211111111( ~lock9, s, sk, status, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_right__0_11111211112[color=#569dc0]:
   [ State_11111211112( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_eq( status, 'right' ) ]->
   [ State_111112111121( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqstatus_right__1_11111211112[color=#569dc0]:
   [ State_11111211112( ~lock9, s, sk, status, x, y ) ]
  --[ Pred_not_eq( status, 'right' ) ]->
   [ State_111112111122( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Accessy_111112111121[color=#569dc0]:
   [ State_111112111121( ~lock9, s, sk, status, x, y ) ]
  --[ Event( ), Access( y ) ]->
   [ State_1111121111211( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_y_1111121111211[color=#569dc0]:
   [ State_1111121111211( ~lock9, s, sk, status, x, y ) ]
  -->
   [ State_11111211112111( ~lock9, s, sk, status, x, y ), Out( y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_11111211112111[color=#569dc0]:
   [ State_11111211112111( ~lock9, s, sk, status, x, y ) ]
  --[ Unlock( $9, ~lock9, s ), Unlock_9( $9, ~lock9, s ) ]->
   [ State_111112111121111( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111112111121111[color=#569dc0]:
   [ State_111112111121111( ~lock9, s, sk, status, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_s_111112111122[color=#569dc0]:
   [ State_111112111122( ~lock9, s, sk, status, x, y ) ]
  --[ Unlock( $9, ~lock9, s ), Unlock_9( $9, ~lock9, s ) ]->
   [ State_1111121111221( ~lock9, s, sk, status, x, y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121111221[color=#569dc0]:
   [ State_1111121111221( ~lock9, s, sk, status, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121112[color=#569dc0]:
   [ State_1111121112( ~lock9, s, sk, x, y ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_11112:
   [ State_11112( s, sk ) ] --> [ !Semistate_111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_11112:
   [ !Semistate_111121( s, sk ) ] --> [ State_111121( s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_lm_111121[color=#2cd719]:
   [ State_111121( s, sk ), Fr( lm ) ] --> [ State_1111211( lm, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_rm_1111211[color=#2cd719]:
   [ State_1111211( lm, s, sk ), Fr( rm ) ]
  -->
   [ State_11112111( lm, rm, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Exclusivelm_rm_11112111[color=#2cd719]:
   [ State_11112111( lm, rm, s, sk ) ]
  --[ Event( ), Exclusive( lm, rm ) ]->
   [ State_111121111( lm, rm, s, sk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_aenc_lm_rm_pksk_111121111[color=#2cd719]:
   [ State_111121111( lm, rm, s, sk ) ]
  -->
   [ State_1111211111( lm, rm, s, sk ), Out( aenc(<lm, rm>, pk(sk)) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111211111[color=#2cd719]:
   [ State_1111211111( lm, rm, s, sk ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_10:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_10( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_10( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction locking_9:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_9( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_9( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

lemma secrecy:
  all-traces
  "¬(∃ x y #i #k1 #k2.
      ((Exclusive( x, y ) @ #i) ∧ (K( x ) @ #k1)) ∧ (K( y ) @ #k2))"
/*
guarded formula characterizing all counter-examples:
"∃ x y #i #k1 #k2.
  (Exclusive( x, y ) @ #i) ∧ (K( x ) @ #k1) ∧ (K( y ) @ #k2)"
*/
by sorry

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_s_as_status_0_1111112111' has unbound variables: 
    status
  
  rule `lookup_s_as_status_0_111112111' has unbound variables: 
    status

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end