theory Contract begin

// Function signature and definition of the equational theory E

functions: check_getmsg/2, check_rep/2, checkpcs/5, convertpcs/2, fst/1,
           get_rep/1, pair/2, pcs/3, pk/1, rep/2 [private], sign/2, snd/1, true/0,
           verify/3
equations:
    check_getmsg(sign(xm, xsk), pk(xsk)) = xm,
    check_rep(rep(m, loc), loc) = m,
    checkpcs(xc, pk(xsk), ypk, zpk, pcs(sign(xc, xsk), ypk, zpk)) = true,
    convertpcs(zsk, pcs(sign(xc, xsk), ypk, pk(zsk))) = sign(xc, xsk),
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    snd(<x.1, x.2>) = x.2,
    verify(sign(x.1, x.2), x.1, pk(x.2)) = true

section{* GM Protocol for Contract signing *}

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ !Semistate_1( ) ] --> [ State_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_skT_1:
   [ State_1( ), Fr( skT ) ] --> [ State_11( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_pkskT_11:
   [ State_11( skT ) ] --> [ State_111( skT ), Out( pk(skT) ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111:
   [ State_111( skT ) ] --> [ State_1111( skT ), State_1112( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_1111:
   [ State_1111( skT ) ] --> [ State_11111( skT ), State_11112( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111:
   [ State_11111( skT ) ] --> [ State_111111( skT ), State_111112( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_111111:
   [ State_111111( skT ) ]
  -->
   [ State_1111111( skT ), State_1111112( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1111111:
   [ State_1111111( skT ) ] --> [ !Semistate_11111111( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1111111:
   [ !Semistate_11111111( skT ) ] --> [ State_11111111( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_abort_ct_pk1_pk2_ysig__11111111[color=#569dc0]:
   [ State_11111111( skT ), In( <'abort', ct, pk1, pk2, ysig> ) ]
  -->
   [ State_111111111( ct, pk1, pk2, skT, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqcheck_getmsgysig_pk1_ct_pk1_pk2__0_111111111[color=#569dc0]:
   [ State_111111111( ct, pk1, pk2, skT, ysig ) ]
  --[ Pred_eq( check_getmsg(ysig, pk1), <ct, pk1, pk2> ) ]->
   [ State_1111111111( ct, pk1, pk2, skT, ysig ) ]

  /*
  rule (modulo AC) if_eqcheck_getmsgysig_pk1_ct_pk1_pk2__0_111111111[color=#569dc0]:
     [ State_111111111( ct, pk1, pk2, skT, ysig ) ]
    --[ Pred_eq( z, <ct, pk1, pk2> ) ]->
     [ State_1111111111( ct, pk1, pk2, skT, ysig ) ]
    variants (modulo AC)
    1. pk1   = pk1.7
       ysig  = ysig.7
       z     = check_getmsg(ysig.7, pk1.7)
    
    2. pk1   = pk(x.7)
       ysig  = sign(x.10, x.7)
       z     = x.10
  */

rule (modulo E) if_eqcheck_getmsgysig_pk1_ct_pk1_pk2__1_111111111[color=#569dc0]:
   [ State_111111111( ct, pk1, pk2, skT, ysig ) ]
  --[ Pred_not_eq( check_getmsg(ysig, pk1), <ct, pk1, pk2> ) ]->
   [ State_1111111112( ct, pk1, pk2, skT, ysig ) ]

  /*
  rule (modulo AC) if_eqcheck_getmsgysig_pk1_ct_pk1_pk2__1_111111111[color=#569dc0]:
     [ State_111111111( ct, pk1, pk2, skT, ysig ) ]
    --[ Pred_not_eq( z, <ct, pk1, pk2> ) ]->
     [ State_1111111112( ct, pk1, pk2, skT, ysig ) ]
    variants (modulo AC)
    1. pk1   = pk1.7
       ysig  = ysig.7
       z     = check_getmsg(ysig.7, pk1.7)
    
    2. pk1   = pk(x.7)
       ysig  = sign(x.10, x.7)
       z     = x.10
  */

rule (modulo E) lock_ct_1111111111[color=#569dc0]:
   [ State_1111111111( ct, pk1, pk2, skT, ysig ), Fr( ~lock7 ) ]
  --[ Lock( $7, ~lock7, ct ), Lock_7( $7, ~lock7, ct ) ]->
   [ State_11111111111( ~lock7, ct, pk1, pk2, skT, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_ct_as_state_0_11111111111[color=#569dc0]:
   [ State_11111111111( ~lock7, ct, pk1, pk2, skT, ysig ) ]
  --[ IsIn( ct, state ) ]->
   [ State_111111111111( ~lock7, ct, pk1, pk2, skT, state, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_ct_as_state_1_11111111111[color=#569dc0]:
   [ State_11111111111( ~lock7, ct, pk1, pk2, skT, ysig ) ]
  --[ IsNotSet( ct ) ]->
   [ State_111111111112( ~lock7, ct, pk1, pk2, skT, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_ct_111111111111[color=#569dc0]:
   [ State_111111111111( ~lock7, ct, pk1, pk2, skT, state, ysig ) ]
  --[ Unlock( $7, ~lock7, ct ), Unlock_7( $7, ~lock7, ct ) ]->
   [ State_1111111111111( ~lock7, ct, pk1, pk2, skT, state, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111111[color=#569dc0]:
   [ State_1111111111111( ~lock7, ct, pk1, pk2, skT, state, ysig ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_ct_aborted__111111111112[color=#569dc0]:
   [ State_111111111112( ~lock7, ct, pk1, pk2, skT, ysig ) ]
  --[ Insert( ct, 'aborted' ) ]->
   [ State_1111111111121( ~lock7, ct, pk1, pk2, skT, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Abort1ct_1111111111121[color=#569dc0]:
   [ State_1111111111121( ~lock7, ct, pk1, pk2, skT, ysig ) ]
  --[ Event( ), Abort1( ct ) ]->
   [ State_11111111111211( ~lock7, ct, pk1, pk2, skT, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_ct_11111111111211[color=#569dc0]:
   [ State_11111111111211( ~lock7, ct, pk1, pk2, skT, ysig ) ]
  --[ Unlock( $7, ~lock7, ct ), Unlock_7( $7, ~lock7, ct ) ]->
   [ State_111111111112111( ~lock7, ct, pk1, pk2, skT, ysig ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_sign_ct_pk1_pk2_ysig_skT_111111111112111[color=#569dc0]:
   [ State_111111111112111( ~lock7, ct, pk1, pk2, skT, ysig ) ]
  -->
   [
   State_1111111111121111( ~lock7, ct, pk1, pk2, skT, ysig ),
   Out( sign(<<ct, pk1, pk2>, ysig>, skT) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111111121111[color=#569dc0]:
   [ State_1111111111121111( ~lock7, ct, pk1, pk2, skT, ysig ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111111112[color=#569dc0]:
   [ State_1111111112( ct, pk1, pk2, skT, ysig ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1111112:
   [ State_1111112( skT ) ] --> [ !Semistate_11111121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1111112:
   [ !Semistate_11111121( skT ) ] --> [ State_11111121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_resolve2_ct_pk1_pk2_ypcs1_ysig2__11111121[color=#2cd719]:
   [ State_11111121( skT ), In( <'resolve2', ct, pk1, pk2, ypcs1, ysig2> ) ]
  -->
   [ State_111111211( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqcheck_getmsgysig2_pk2_ct_0_111111211[color=#2cd719]:
   [ State_111111211( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Pred_eq( check_getmsg(ysig2, pk2), ct ) ]->
   [ State_1111112111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /*
  rule (modulo AC) if_eqcheck_getmsgysig2_pk2_ct_0_111111211[color=#2cd719]:
     [ State_111111211( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    --[ Pred_eq( z, ct ) ]->
     [ State_1111112111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    variants (modulo AC)
    1. pk2   = pk2.8
       ysig2 = ysig2.8
       z     = check_getmsg(ysig2.8, pk2.8)
    
    2. pk2   = pk(x.8)
       ysig2 = sign(x.11, x.8)
       z     = x.11
  */

rule (modulo E) if_eqcheck_getmsgysig2_pk2_ct_1_111111211[color=#2cd719]:
   [ State_111111211( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Pred_not_eq( check_getmsg(ysig2, pk2), ct ) ]->
   [ State_1111112112( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /*
  rule (modulo AC) if_eqcheck_getmsgysig2_pk2_ct_1_111111211[color=#2cd719]:
     [ State_111111211( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    --[ Pred_not_eq( z, ct ) ]->
     [ State_1111112112( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    variants (modulo AC)
    1. pk2   = pk2.8
       ysig2 = ysig2.8
       z     = check_getmsg(ysig2.8, pk2.8)
    
    2. pk2   = pk(x.8)
       ysig2 = sign(x.11, x.8)
       z     = x.11
  */

rule (modulo E) if_eqcheckpcsct_pk1_pk2_pkskT_ypcs1_true_0_1111112111[color=#2cd719]:
   [ State_1111112111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Pred_eq( checkpcs(ct, pk1, pk2, pk(skT), ypcs1), true ) ]->
   [ State_11111121111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /*
  rule (modulo AC) if_eqcheckpcsct_pk1_pk2_pkskT_ypcs1_true_0_1111112111[color=#2cd719]:
     [ State_1111112111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    --[ Pred_eq( z, true ) ]->
     [ State_11111121111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    variants (modulo AC)
    1. ct    = ct.8
       pk1   = pk1.8
       pk2   = pk2.8
       skT   = skT.8
       ypcs1 = ypcs1.8
       z     = checkpcs(ct.8, pk1.8, pk2.8, pk(skT.8), ypcs1.8)
    
    2. ct    = x.8
       pk1   = pk(x.9)
       pk2   = x.10
       skT   = x.11
       ypcs1 = pcs(sign(x.8, x.9), x.10, pk(x.11))
       z     = true
  */

rule (modulo E) if_eqcheckpcsct_pk1_pk2_pkskT_ypcs1_true_1_1111112111[color=#2cd719]:
   [ State_1111112111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Pred_not_eq( checkpcs(ct, pk1, pk2, pk(skT), ypcs1), true ) ]->
   [ State_11111121112( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /*
  rule (modulo AC) if_eqcheckpcsct_pk1_pk2_pkskT_ypcs1_true_1_1111112111[color=#2cd719]:
     [ State_1111112111( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    --[ Pred_not_eq( z, true ) ]->
     [ State_11111121112( ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    variants (modulo AC)
    1. ct    = ct.8
       pk1   = pk1.8
       pk2   = pk2.8
       skT   = skT.8
       ypcs1 = ypcs1.8
       z     = checkpcs(ct.8, pk1.8, pk2.8, pk(skT.8), ypcs1.8)
    
    2. ct    = x.8
       pk1   = pk(x.9)
       pk2   = x.10
       skT   = x.11
       ypcs1 = pcs(sign(x.8, x.9), x.10, pk(x.11))
       z     = true
  */

rule (modulo E) lock_ct_11111121111[color=#2cd719]:
   [ State_11111121111( ct, pk1, pk2, skT, ypcs1, ysig2 ), Fr( ~lock7 ) ]
  --[ Lock( $7, ~lock7, ct ), Lock_7( $7, ~lock7, ct ) ]->
   [ State_111111211111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_ct_as_status_0_111111211111[color=#2cd719]:
   [ State_111111211111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ IsIn( ct, status ) ]->
   [ State_1111112111111( ~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_ct_as_status_1_111111211111[color=#2cd719]:
   [ State_111111211111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ IsNotSet( ct ) ]->
   [ State_1111112111112( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_ct_1111112111111[color=#2cd719]:
   [ State_1111112111111( ~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2 )
   ]
  --[ Unlock( $7, ~lock7, ct ), Unlock_7( $7, ~lock7, ct ) ]->
   [ State_11111121111111( ~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121111111[color=#2cd719]:
   [ State_11111121111111( ~lock7, ct, pk1, pk2, skT, status, ypcs1, ysig2 )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_ct_resolved2__1111112111112[color=#2cd719]:
   [ State_1111112111112( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Insert( ct, 'resolved2' ) ]->
   [ State_11111121111121( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Resolve2ct_11111121111121[color=#2cd719]:
   [ State_11111121111121( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Event( ), Resolve2( ct ) ]->
   [ State_111111211111211( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_ct_111111211111211[color=#2cd719]:
   [ State_111111211111211( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  --[ Unlock( $7, ~lock7, ct ), Unlock_7( $7, ~lock7, ct ) ]->
   [ State_1111112111112111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_sign_convertpcsskT_ypcs1_ysig2_skT_1111112111112111[color=#2cd719]:
   [ State_1111112111112111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  -->
   [
   State_11111121111121111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ),
   Out( sign(<convertpcs(skT, ypcs1), ysig2>, skT) )
   ]

  /*
  rule (modulo AC) out_sign_convertpcsskT_ypcs1_ysig2_skT_1111112111112111[color=#2cd719]:
     [ State_1111112111112111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
    -->
     [
     State_11111121111121111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ),
     Out( sign(<z, ysig2>, skT) )
     ]
    variants (modulo AC)
    1. skT   = skT.9
       ypcs1 = ypcs1.9
       z     = convertpcs(skT.9, ypcs1.9)
    
    2. skT   = x.9
       ypcs1 = pcs(sign(x.10, x.11), x.12, pk(x.9))
       z     = sign(x.10, x.11)
  */

rule (modulo E) Zero_11111121111121111[color=#2cd719]:
   [ State_11111121111121111( ~lock7, ct, pk1, pk2, skT, ypcs1, ysig2 ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111121112[color=#2cd719]:
   [ State_11111121112( ct, pk1, pk2, skT, ypcs1, ysig2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111112112[color=#2cd719]:
   [ State_1111112112( ct, pk1, pk2, skT, ypcs1, ysig2 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111112:
   [ State_111112( skT ) ] --> [ !Semistate_1111121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111112:
   [ !Semistate_1111121( skT ) ] --> [ State_1111121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_resolve1_ct_pk1_pk2_ysig1_ypcs2__1111121[color=#11ec28]:
   [ State_1111121( skT ), In( <'resolve1', ct, pk1, pk2, ysig1, ypcs2> ) ]
  -->
   [ State_11111211( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) if_eqcheck_getmsgysig1_pk1_ct_0_11111211[color=#11ec28]:
   [ State_11111211( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Pred_eq( check_getmsg(ysig1, pk1), ct ) ]->
   [ State_111112111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /*
  rule (modulo AC) if_eqcheck_getmsgysig1_pk1_ct_0_11111211[color=#11ec28]:
     [ State_11111211( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    --[ Pred_eq( z, ct ) ]->
     [ State_111112111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    variants (modulo AC)
    1. pk1   = pk1.8
       ysig1 = ysig1.8
       z     = check_getmsg(ysig1.8, pk1.8)
    
    2. pk1   = pk(x.8)
       ysig1 = sign(x.12, x.8)
       z     = x.12
  */

rule (modulo E) if_eqcheck_getmsgysig1_pk1_ct_1_11111211[color=#11ec28]:
   [ State_11111211( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Pred_not_eq( check_getmsg(ysig1, pk1), ct ) ]->
   [ State_111112112( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /*
  rule (modulo AC) if_eqcheck_getmsgysig1_pk1_ct_1_11111211[color=#11ec28]:
     [ State_11111211( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    --[ Pred_not_eq( z, ct ) ]->
     [ State_111112112( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    variants (modulo AC)
    1. pk1   = pk1.8
       ysig1 = ysig1.8
       z     = check_getmsg(ysig1.8, pk1.8)
    
    2. pk1   = pk(x.8)
       ysig1 = sign(x.12, x.8)
       z     = x.12
  */

rule (modulo E) if_eqcheckpcsct_pk2_pk1_pkskT_ypcs2_true_0_111112111[color=#11ec28]:
   [ State_111112111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Pred_eq( checkpcs(ct, pk2, pk1, pk(skT), ypcs2), true ) ]->
   [ State_1111121111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /*
  rule (modulo AC) if_eqcheckpcsct_pk2_pk1_pkskT_ypcs2_true_0_111112111[color=#11ec28]:
     [ State_111112111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    --[ Pred_eq( z, true ) ]->
     [ State_1111121111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    variants (modulo AC)
    1. ct    = ct.8
       pk1   = pk1.8
       pk2   = pk2.8
       skT   = skT.8
       ypcs2 = ypcs2.8
       z     = checkpcs(ct.8, pk2.8, pk1.8, pk(skT.8), ypcs2.8)
    
    2. ct    = x.8
       pk1   = x.9
       pk2   = pk(x.10)
       skT   = x.11
       ypcs2 = pcs(sign(x.8, x.10), x.9, pk(x.11))
       z     = true
  */

rule (modulo E) if_eqcheckpcsct_pk2_pk1_pkskT_ypcs2_true_1_111112111[color=#11ec28]:
   [ State_111112111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Pred_not_eq( checkpcs(ct, pk2, pk1, pk(skT), ypcs2), true ) ]->
   [ State_1111121112( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /*
  rule (modulo AC) if_eqcheckpcsct_pk2_pk1_pkskT_ypcs2_true_1_111112111[color=#11ec28]:
     [ State_111112111( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    --[ Pred_not_eq( z, true ) ]->
     [ State_1111121112( ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    variants (modulo AC)
    1. ct    = ct.8
       pk1   = pk1.8
       pk2   = pk2.8
       skT   = skT.8
       ypcs2 = ypcs2.8
       z     = checkpcs(ct.8, pk2.8, pk1.8, pk(skT.8), ypcs2.8)
    
    2. ct    = x.8
       pk1   = x.9
       pk2   = pk(x.10)
       skT   = x.11
       ypcs2 = pcs(sign(x.8, x.10), x.9, pk(x.11))
       z     = true
  */

rule (modulo E) lock_ct_1111121111[color=#11ec28]:
   [ State_1111121111( ct, pk1, pk2, skT, ypcs2, ysig1 ), Fr( ~lock7 ) ]
  --[ Lock( $7, ~lock7, ct ), Lock_7( $7, ~lock7, ct ) ]->
   [ State_11111211111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_ct_as_status_0_11111211111[color=#11ec28]:
   [ State_11111211111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ IsIn( ct, status ) ]->
   [ State_111112111111( ~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lookup_ct_as_status_1_11111211111[color=#11ec28]:
   [ State_11111211111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ IsNotSet( ct ) ]->
   [ State_111112111112( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_ct_111112111111[color=#11ec28]:
   [ State_111112111111( ~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1 ) ]
  --[ Unlock( $7, ~lock7, ct ), Unlock_7( $7, ~lock7, ct ) ]->
   [ State_1111121111111( ~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1 )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121111111[color=#11ec28]:
   [ State_1111121111111( ~lock7, ct, pk1, pk2, skT, status, ypcs2, ysig1 )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) insert_ct_resolved1__111112111112[color=#11ec28]:
   [ State_111112111112( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Insert( ct, 'resolved1' ) ]->
   [ State_1111121111121( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Resolve1ct_1111121111121[color=#11ec28]:
   [ State_1111121111121( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Event( ), Resolve1( ct ) ]->
   [ State_11111211111211( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_ct_11111211111211[color=#11ec28]:
   [ State_11111211111211( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  --[ Unlock( $7, ~lock7, ct ), Unlock_7( $7, ~lock7, ct ) ]->
   [ State_111112111112111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_sign_ysig1_convertpcsskT_ypcs2_skT_111112111112111[color=#11ec28]:
   [ State_111112111112111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  -->
   [
   State_1111121111121111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ),
   Out( sign(<ysig1, convertpcs(skT, ypcs2)>, skT) )
   ]

  /*
  rule (modulo AC) out_sign_ysig1_convertpcsskT_ypcs2_skT_111112111112111[color=#11ec28]:
     [ State_111112111112111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
    -->
     [
     State_1111121111121111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ),
     Out( sign(<ysig1, z>, skT) )
     ]
    variants (modulo AC)
    1. skT   = skT.9
       ypcs2 = ypcs2.9
       z     = convertpcs(skT.9, ypcs2.9)
    
    2. skT   = x.9
       ypcs2 = pcs(sign(x.10, x.11), x.12, pk(x.9))
       z     = sign(x.10, x.11)
  */

rule (modulo E) Zero_1111121111121111[color=#11ec28]:
   [ State_1111121111121111( ~lock7, ct, pk1, pk2, skT, ypcs2, ysig1 ) ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1111121112[color=#11ec28]:
   [ State_1111121112( ct, pk1, pk2, skT, ypcs2, ysig1 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111112112[color=#11ec28]:
   [ State_111112112( ct, pk1, pk2, skT, ypcs2, ysig1 ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_11112:
   [ State_11112( skT ) ] --> [ !Semistate_111121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_11112:
   [ !Semistate_111121( skT ) ] --> [ State_111121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_sign_ct_pksk1_pksk2_sign_ct_pksk1_pksk2_sk1_skT_111121[color=#45d1e2]:
   [
   State_111121( skT ),
   In( sign(<<ct, pk(sk1), pk(sk2)>, sign(<ct, pk(sk1), pk(sk2)>, sk1)>,
            skT)
   )
   ]
  -->
   [ State_1111211( ct, sk1, sk2, skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_AbortCertct_1111211[color=#45d1e2]:
   [ State_1111211( ct, sk1, sk2, skT ) ]
  --[ Event( ), AbortCert( ct ) ]->
   [ State_11112111( ct, sk1, sk2, skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11112111[color=#45d1e2]:
   [ State_11112111( ct, sk1, sk2, skT ) ] --> [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_1112:
   [ State_1112( skT ) ] --> [ !Semistate_11121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_1112:
   [ !Semistate_11121( skT ) ] --> [ State_11121( skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_sign_signct_sk1_signct_sk2_skT_11121[color=#9f76cd]:
   [ State_11121( skT ), In( sign(<sign(ct, sk1), sign(ct, sk2)>, skT) ) ]
  -->
   [ State_111211( ct, sk1, sk2, skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_ResolveCertct_111211[color=#9f76cd]:
   [ State_111211( ct, sk1, sk2, skT ) ]
  --[ Event( ), ResolveCert( ct ) ]->
   [ State_1112111( ct, sk1, sk2, skT ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_1112111[color=#9f76cd]:
   [ State_1112111( ct, sk1, sk2, skT ) ] --> [ ]

  /* has exactly the trivial AC variant */

restriction set_in:
  "∀ x y #t3.
    (IsIn( x, y ) @ #t3) ⇒
    (∃ #t2.
      (((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ∧
       (∀ #t1. (Delete( x ) @ #t1) ⇒ ((#t1 < #t2) ∨ (#t3 < #t1)))) ∧
      (∀ #t1 yp.
        (Insert( x, yp ) @ #t1) ⇒ (((#t1 < #t2) ∨ (#t1 = #t2)) ∨ (#t3 < #t1))))"

restriction set_notin:
  "∀ x #t3.
    (IsNotSet( x ) @ #t3) ⇒
    ((∀ #t1 y. (Insert( x, y ) @ #t1) ⇒ (#t3 < #t1)) ∨
     (∃ #t1.
       ((Delete( x ) @ #t1) ∧ (#t1 < #t3)) ∧
       (∀ #t2 y. ((Insert( x, y ) @ #t2) ∧ (#t2 < #t3)) ⇒ (#t2 < #t1))))"

restriction predicate_eq:
  "∀ #i a b. (Pred_eq( a, b ) @ #i) ⇒ (a = b)"
  // safety formula

restriction predicate_not_eq:
  "∀ #i a b. (Pred_not_eq( a, b ) @ #i) ⇒ (¬(a = b))"
  // safety formula

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction locking_7:
  "∀ p pp l x lp #t1 #t3.
    ((Lock_7( p, l, x ) @ #t1) ∧ (Lock( pp, lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock_7( p, l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0 pp.1. (Unlock( pp.1, l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ pp.1 lpp #t0.
            (Lock( pp.1, lpp, x ) @ #t0) ⇒
            (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ pp.1 lpp #t0.
           (Unlock( pp.1, lpp, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

lemma aborted_and_resolved_exclusive:
  all-traces
  "¬(∃ ct #i #j. (AbortCert( ct ) @ #i) ∧ (ResolveCert( ct ) @ #j))"
/*
guarded formula characterizing all counter-examples:
"∃ ct #i #j. (AbortCert( ct ) @ #i) ∧ (ResolveCert( ct ) @ #j)"
*/
by sorry

/*
WARNING: the following wellformedness checks failed!

unbound:
  rule `lookup_ct_as_state_0_11111111111' has unbound variables: 
    state
  
  rule `lookup_ct_as_status_0_111111211111' has unbound variables: 
    status
  
  rule `lookup_ct_as_status_0_11111211111' has unbound variables: 
    status

Restriction actions:
  restriction `set_in' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
  
  restriction `set_notin' references action 
    (ProtoFact Linear "Delete" 1,1,Linear)
  but no rule has such an action.
*/

end